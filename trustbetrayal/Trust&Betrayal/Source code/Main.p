PROGRAM Siboot;USES{$L-}{$U-}     {$LOAD MQOTP.dumpfile}       Memtypes, QuickDraw, OSIntf, ToolIntf, PackIntf,	 {$LOAD Globals.dumpfile}     {$U Globals.p}  Globals,	 {$LOAD}	 {$U Words.p} Words,     {$U Init.p}  Init,	 {$U Combat.p} Combat,	 {$U TitleZ.p} TitleZ,	 {$U REvent.p} REvent,	 {$U PlanMyMove.p} PlanMyMove,	 {$U Banana.p} Banana,	 {$U StdRoutines.p} StdRoutines,     {$U Edit.p}  Edit;{$U+}{$E+}{$L+}{$ASM+}{$D-}{$R-}{$OV-}{$SETC AlrtEnbl:=TRUE}{$SETC DebugFlg:=FALSE}{$IFC DebugFlg}  {$D+}  {$R+}  {$OV+}{$ENDC}{********************************************************************************}PROCEDURE DrawBkSp;BEGIN  FillRect(BkSpRect,white);  FrameRect(BkSpRect);  MoveTo(ScrnX1+17,ScrnY1+17); DrawString('Back');  MoveTo(ScrnX1+14,ScrnY1+29); DrawString('Space');END;{********************************************************************************}PROCEDURE DrawDoCncl;BEGIN  FillRect(DoITRect,white);  FrameRect(DoItRect);  MoveTo(ScrnX1+17,ScrnY1+62); DrawString('Do It');  FillRect(CnclRect,white);  FrameRect(CnclRect);  MoveTo(ScrnX1+10,ScrnY1+100); DrawString('Cancel');END;{********************************************************************************}PROCEDURE PlunkDown;VAR  j,x,y:       Integer;  PlunkRect:   Rect;BEGIN  SntcIndx:=SntcIndx+1;  x:=Sentence[Player,VerbA];  y:=Sentence[Player,VerbB];  IF ((SntcIndx mod 4)=ObjectA1) THEN      IF SntcIndx=ObjectA1 THEN CurWord:=Abs(x)                           ELSE CurWord:=Abs(y);  IF ((SntcIndx<>ObjectA2) OR (CurWord=WThat) OR (Abs(x)=WReveal))    THEN NewWordSet((SntcIndx mod 4)<>ObjectA1)    ELSE BEGIN IconCount:=0; CurWord:=0; END;END;{********************************************************************************}FUNCTION ExecSntc(Who: Integer): Boolean; {executes sentence of character Who, returns TRUE if player can resume play.}VAR  i,j,k,t,x,y,z,Where,OtherG,Temp1:      Integer;  MSubjA,MVerbA,MObjA1,MObjA2,MSubjB,MVerbB,MObjB1,MObjB2:  Integer;  LSubjA,LVerbA,LObjA1,LObjA2,LSubjB,LVerbB,LObjB1,LObjB2:  Integer;  ToldFlag,TempFlg1,TempFlg2,TempFlg3:	        Boolean;  Rect1,Rect2:							Rect;{------------------------------------------------------------------------}PROCEDURE DrawStnc(NarrNum: Integer);BEGIN  Narrate(NarrNum,Who);  CleanOutRect(RoomRect);  PlotSntc(Who,ScrnX2+6,ScrnY2+8,FALSE);END;{------------------------------------------------------------------------}PROCEDURE IfDrawSntc(NarrNum: Integer);BEGIN  IF OtherG=Player THEN DrawStnc(NarrNum);END;{------------------------------------------------------------------------}PROCEDURE AskOrReveal(NarrNum1,NarrNum2: Integer);BEGIN  IF CharLocn[MObjA1]=CharLocn[Who] THEN    BEGIN      IF Who=Player THEN Narrate(NarrNum1,MObjA1);	  IfDrawSntc(NarrNum2);    END; {of test for same location}END;{------------------------------------------------------------------------}PROCEDURE ExecDeal;BEGIN  IF LSubjA=Player THEN Narrate(7,LObjA1);  PostHist(LSubjA,LObjA2,LObjA1);  PostHist(LObjA1,LObjB1,LSubjA);  AuraCnt[LObjB2-35,LObjB1,LSubjA]:=AuraCnt[LObjB2-35,LObjB1,LObjA1];  AuraCnt[LSubjB-35,LObjA2,LObjA1]:=AuraCnt[LSubjB-35,LObjA2,LSubjA];  Beneficence[Who,OtherG]:=Beneficence[Who,OtherG]+1;  IF (Who=Player) OR (OtherG=Player) THEN	BEGIN	  Sentence[Who,VerbA]:=WReveal;	  Sentence[Who,ObjectA1]:=LSubjA;	  Sentence[Who,ObjectA2]:=WThat;	  Sentence[Who,SubjectB]:=LObjB1;	  Sentence[Who,VerbB]:=LObjB2;	  Sentence[Who,ObjectB1]:=AuraCnt[LObjB2-35,LObjB1,LObjA1]+104;	  Sentence[0,SubjectA]:=LSubjA;	  Sentence[0,VerbA]:=WReveal;	  Sentence[0,ObjectA1]:=LObjA1;	  Sentence[0,ObjectA2]:=WThat;	  Sentence[0,SubjectB]:=LObjA2;	  Sentence[0,VerbB]:=LSubjB;	  Sentence[0,ObjectB1]:=AuraCnt[LSubjB-35,LObjA2,LSubjA]+104;	  IF Who=Player THEN 		BEGIN		  CleanOutRect(PlayRect);		  PlotSntc(Who,ScrnX2+6,ScrnY1+2,FALSE);		  PlotSntc(0,ScrnX2+166,ScrnY1+2,FALSE);		  IF Love[LObjA2,Player]>0 THEN FBetrayals:=FBetrayals+1;		END	  ELSE 		BEGIN		  CleanOutRect(RoomRect);		  PlotSntc(Who,ScrnX2+6,ScrnY2+6,FALSE);		  PlotSntc(0,ScrnX2+166,ScrnY2+6,FALSE);		  IF Love[LObjB1,Player]>0 THEN FBetrayals:=FBetrayals+1;		END;	  MyWait(StoryDelay);	  IF (FBetrayals>8) & (StoryParm[37]=1024) THEN StoryParm[37]:=8;	  PlayerDeals:=PlayerDeals+1;	END;END;{------------------------------------------------------------------------}BEGIN  IF Who=Player THEN FillRect(ComdRect,DiurnalP);  MSubjA:=Sentence[Who,SubjectA];  MVerbA:=Sentence[Who,VerbA];  MObjA1:=Sentence[Who,ObjectA1];  MObjA2:=Sentence[Who,ObjectA2];  MSubjB:=Sentence[Who,SubjectB];  MVerbB:=Sentence[Who,VerbB];  MObjB1:=Sentence[Who,ObjectB1];  MObjB2:=Sentence[Who,ObjectB2];  OtherG:=Interloc[Who];  IF OtherG>0 THEN     BEGIN	  LSubjA:=LastSntc[OtherG,SubjectA];	  LVerbA:=LastSntc[OtherG,VerbA];	  LObjA1:=LastSntc[OtherG,ObjectA1];	  LObjA2:=LastSntc[OtherG,ObjectA2];	  LSubjB:=LastSntc[OtherG,SubjectB];	  LVerbB:=LastSntc[OtherG,VerbB];	  LObjB1:=LastSntc[OtherG,ObjectB1];	  LObjB2:=LastSntc[OtherG,ObjectB2];	END;  IF MVerbA<>WPause THEN    BEGIN      FOR i:=1 TO SntcLeng DO LastSntc[Who,i]:=Sentence[Who,i];	  IF OtherG>0 THEN	    BEGIN		  x:=DlogIndx[Who]+1;		  IF x>DlogMax THEN		    BEGIN {forget old stuff}			  x:=DlogMax;			  FOR j:=2 TO DlogMax DO			    FOR k:=1 TO SntcLeng DO			      DlogHist[Who,j-1,k]:=DlogHist[Who,j,k];			END;	  		  DlogIndx[Who]:=x;		  FOR i:=1 TO SntcLeng DO DlogHist[Who,x,i]:=Sentence[Who,i];		  IF (Who=Player) & (CharLocn[Who]<>Who) THEN RandEvent(2,OtherG);		  IF (Who=Player) & (CharLocn[Who]=Who) THEN RandEvent(3,OtherG);		END;	END;  CASE MVerbA OF    WGreet:	  BEGIN	    HelloFlg[Who]:=TRUE; 		IfDrawSntc(4);		IF Who=Player THEN Narrate(25,MObjA1);	  END;	WGoodBye: 	  BEGIN	    Where:=CharLocn[Who];	    HelloFlg[Who]:=TRUE;		IF NOT GuestFlg[Who] & (OtherG<>Player) THEN		  BEGIN {penalty for kicking somebody out}		    x:=Love[OtherG,Who]-4;			IF x<-127 THEN x:=-127;		    Love[OtherG,Who]:=x;			x:=Trust[OtherG,Who]-4;			IF x<-127 THEN x:=-127;			Trust[OtherG,Who]:=x;		  END;		IF Who=Player THEN		  BEGIN			Narrate(29,OtherG);			CleanOutRect(RoomRect);			StatDisp;		  END;		IF OtherG=Player THEN		  BEGIN		    DrawStnc(30);			MyWait(StoryDelay);			CleanOutRect(RoomRect);			StatDisp;		  END;	    IF GuestFlg[Who] THEN EndDialog(Who,OtherG)					     ELSE EndDialog(OtherG,Who);      END;	WSayFeel: BEGIN 				IfDrawSntc(MObjA2-79);				IF Who=Player THEN Narrate(MObjA2-57,OtherG);			  END;    WAccuse: 	  CASE MVerbB OF		WBetray:		  BEGIN			IF Who=Player THEN Narrate(19,MObjA1);			IfDrawSntc(18);			i:=1;			ToldFlag:=FALSE;			WHILE (i<=HistIndx) AND NOT ToldFlag DO			  BEGIN				TempFlg1:=(HstWrd1H^^[i]=MObjA1);				TempFlg3:=(HstWrd3H^^[i]=Who);				IF TempFlg1 & TempFlg3 & HstKnowH[i,Who] THEN				  BEGIN				    IF i<HistIndx THEN					  BEGIN {purge the memory}				    	FOR j:=i+1 TO HistIndx DO					  	  BEGIN							HstWrd1H^^[j-1]:=HstWrd1H^^[j];							HstWrd3H^^[j-1]:=HstWrd3H^^[j];							HstDateH^^[j-1]:=HstDateH^^[j];							HstTimeH^^[j-1]:=HstTimeH^^[j];							FOR k:=1 TO 8 DO							  BEGIN							    TempFlg2:=HstKnowH[j,k];								HstKnowH[j-1,k]:=TempFlg2;							  END;						  END;					  END;				    HistIndx:=HistIndx-1;					{HstKnowH[i,8]:=TRUE;}					ToldFlag:=TRUE;				  END;				i:=i+1;			  END;		  END;		WBBetray:		  BEGIN			NBetrayCount[MSubjB,Who]:=NBetrayCount[MSubjB,Who]-1;			IfDrawSntc(54);			IF Who=Player THEN Narrate(56,MObjA1);		  END;		WBAttack:		  BEGIN			NAttackCount[MSubjB,Who]:=NAttackCount[MSubjB,Who]-1;			IfDrawSntc(53);			IF Who=Player THEN Narrate(55,MObjA1);		  END;	  END; {of CASE Statement}    WReveal: AskOrReveal(6,8);     WBeg: AskOrReveal(33,16);	WThreat: AskOrReveal(15,17);    WGo: BEGIN	      Where:=MObjA1-56;		  IF Who=Player THEN		    BEGIN			  x:=0;			  FOR i:=1 TO NumChars DO 				IF (i<>Player) & (CharLocn[i]=0) THEN x:=i;			  IF x>0 THEN RandEvent(1,x);			END;		  IF NOT DoorLock[Where] OR (Who=Where) THEN 		    BEGIN              CharLocn[Who]:=Where;			  Interloc[Who]:=0;			  IF (CharLocn[Player]=Where) AND (Who<>Player) THEN			    BEGIN			      Narrate(12,Who);				  CleanOutRect(RoomRect);				  StatDisp;				END;			  DoorLock[Where]:=FALSE;			  FOR i:=1 TO NumChars DO 			    IF (i<>Who) & (CharLocn[i]=Where) THEN InitDialog(Who,i);		      IF Who=Player THEN		        BEGIN			      IF MObjA1-56<>Player THEN Narrate(5,MObjA1-56)				  					   ELSE Narrate(14,Player);                END;			  UnlockDoor(Where,HowArrive,Who);		    END		  ELSE 		    BEGIN {character arrives but door is locked}			  CharLocn[Who]:=-Where;			  IF Who=Player THEN Narrate(34,Where);			END;		  IF Who=Player THEN BEGIN CleanOutRect(RoomRect); StatDisp; END;		END;    53,54,55: Midnight;    WTell,WAnswer:      BEGIN	    IF MVerbA=WTell THEN IfDrawSntc(49) ELSE IfDrawSntc(50);	    IF (MSubjB=WNobody) AND (MObjA1=Player) THEN		  BEGIN 			CleanOutRect(RoomRect);			PlotSntc(Who,ScrnX2+6,ScrnY2+8,FALSE);		  END;		i:=1;		ToldFlag:=FALSE;		WHILE (i<=HistIndx) & NOT ToldFlag DO          BEGIN            TempFlg1:=(HstWrd1H^^[i]=MSubjB);            TempFlg3:=(HstWrd3H^^[i]=MObjB1);            IF TempFlg1 & TempFlg3 			   & NOT HstKnowH[i,MObjA1] & HstKnowH[i,Who] THEN              BEGIN                IF MObjA1=Player THEN                  BEGIN                    CleanOutRect(RoomRect);                    PlotSntc(Who,ScrnX2+6,ScrnY2+8,FALSE);                    DrawClock(ScrnX2+128,ScrnY2+22,HstDateH^^[i],HstTimeH^^[i]);                  END;                HstKnowH[i,MObjA1]:=TRUE;				ToldFlag:=TRUE;				IF MObjA1=MObjB1 THEN				  BEGIN				    x:=HstDateH^^[i];				    IF NBetray[MSubjB,MObjB1,x] THEN					  BEGIN					    x:=NBetrayCount[MSubjB,MObjB1]+1;					    NBetrayCount[MSubjB,MObjB1]:=x;						x:=Trust[MObjB1,MSubjB]-16*(4-Level);						IF x<-127 THEN x:=-127;						Trust[MObjB1,MSubjB]:=x;				      END;                  END;			  END;			i:=i+1;          END;		IF LVerbA=WAsk THEN x:=1 ELSE x:=2;		Beneficence[Who,OtherG]:=Beneficence[Who,OtherG]+x;		IF (MSubjB<=ConstChars) & (Who<>MSubjB) THEN PostHist(Who,MSubjB,MObjA1);      END;	WAgree: ExecDeal;	WReject: IfDrawSntc(11);    WAsk: AskOrReveal(3,24);	WWait: IfDrawSntc(0);	WNBetray: 	  BEGIN	    IfDrawSntc(51);		NBetray[Who,MObjA1,Day]:=TRUE;		IF Who=Player THEN Narrate(71,MObjA1);      END;	WNAttack: 	  BEGIN	    IfDrawSntc(52);		NAttack[Who,MObjA1]:=TRUE;		IF Who=Player THEN Narrate(72,MObjA1);      END;  END; {of gigantic CASE-statement}  IF MVerbA=WPause THEN    BEGIN	  IF Who<>Player THEN	    BEGIN		  Me:=Who;		  PlanMove; 		  CalcTime(Who,Sentence[Who,VerbA]);        END;	  ExecSntc:=TRUE;	END  ELSE     BEGIN	IF Sentence[Who,VerbA]<>WPause THEN {this is a kluge for InitDialog}	  BEGIN		Sentence[Who,VerbA]:=WPause;		Sentence[Who,ObjectA1]:=3;		FOR j:=4 TO SntcLeng DO Sentence[Who,j]:=0;		ExecTime[Who]:=Time+3;		ExecSntc:=FALSE;		IF OtherG=Player THEN		  BEGIN {new face and emotion bar-graph}		    BarGraphFlag:=TRUE;			SetRect(Rect1,ScrnX1+1,ScrnY2+4,ScrnX1+140,ScrnY2+68);			FillRect(Rect1,DiurnalP);			SetRect(Rect1,1,1,9,9);			SetRect(Rect2,ScrnX1+1,ScrnY2+8,ScrnX1+9,ScrnY2+16);			CopyBits(WordIcon[87],ScreenBits,Rect1,Rect2,srcCopy,NIL);			SetRect(Rect1,1,9,9,17);			SetRect(Rect2,ScrnX1+1,ScrnY2+32,ScrnX1+9,ScrnY2+40);			CopyBits(WordIcon[87],ScreenBits,Rect1,Rect2,srcCopy,NIL);			SetRect(Rect1,1,17,9,25);			SetRect(Rect2,ScrnX1+1,ScrnY2+56,ScrnX1+9,ScrnY2+64);			CopyBits(WordIcon[87],ScreenBits,Rect1,Rect2,srcCopy,NIL);			FOR i:=1 TO 6 DO			  BEGIN			    x:=ScrnX1+12;				y:=ScrnY2+4+8*(i-1);				IF i>2 THEN y:=y+8;				IF i>4 THEN y:=y+8;				CASE i OF				  1: z:=LastFear;				  2: z:=Fear[Who,Player];				  3: z:=LastTrust;				  4: z:=Trust[Who,Player];				  5: z:=LastLove;				  6: z:=Love[Who,Player];				END;				z:=ScrnX1+76+(z div 2);			    SetRect(BarGraphRect[i],x,y,z,y+8);				IF (i mod 2)=1 THEN FillRect(BarGraphRect[i],gray)							   ELSE FillRect(BarGraphRect[i],black);				FrameRect(BarGraphRect[i]);			  END;			LastLove:=Love[Who,Player];			LastTrust:=Trust[Who,Player];			LastFear:=Fear[Who,Player];		  END;	  END;	END;  {now wake up anybody killing time in the same location}  FOR i:=1 TO NumChars DO    IF (i<>Who)   	 & (CharLocn[i]=CharLocn[Who]) 	 & (CharLocn[i]>0) 	 & (Sentence[i,VerbA]=WWait) THEN	   BEGIN	     Sentence[i,VerbA]:=WPause;		 ExecTime[i]:=Time+1;	   END;  IF Who=Player THEN     BEGIN 	  StatDisp; 	  IF OtherG=0 THEN 	    BEGIN 		  FillRect(FeelRect,DiurnalP);		  BarGraphFlag:=FALSE;		END;	END;END;{********************************************************************************}PROCEDURE BackSpWord; {cancels previously entered choice}BEGIN  InvertRect(BkSpRect);  REPEAT UNTIL NOT StillDown;  InvertRect(BkSpRect);  GetMouse(MousePt);  IF PtInRect(MousePt,BkSpRect) THEN    BEGIN      REPEAT        Sentence[Player,SntcIndx]:=0;        IF SntcIndx<ObjectB2 THEN CanclAble[SntcIndx+1]:=FALSE;        SntcIndx:=SntcIndx-1;      UNTIL CanclAble[SntcIndx+1] OR (SntcIndx=1);      CurWord:=Abs(Sentence[Player,SntcIndx]);      IF SntcIndx=SubjectA THEN CurWord:=Player; {this is real brute force}      CleanOutRect(PlayRect);      PlotSntc(Player,ScrnX2+6,ScrnY1+16,TRUE);      IF SntcIndx=1 THEN GrayRect(BkSpRect);      IF ((SntcIndx mod 4)=ObjectA1) THEN          IF SntcIndx=ObjectA1 THEN CurWord:=Abs(Sentence[Player,VerbA])                               ELSE CurWord:=Abs(Sentence[Player,VerbB]);      NewWordSet((SntcIndx mod 4)<>ObjectA1);      FillRect(DoItRect,DiurnalP);      FillRect(CnclRect,DiurnalP);    END;  MousePt:=MyEvent.where;  myEvent.what:=0; {kludge!}END;{********************************************************************************}PROCEDURE EndSntc;VAR  i: Integer;BEGIN  CleanOutRect(PlayRect);  FillRect(ComdRect,DiurnalP);  CurWord:=0;  FOR i:=1 TO SntcLeng DO    BEGIN      Sentence[Player,i]:=0;      CanclAble[i]:=FALSE;    END;  SntcIndx:=0;  NewWordSet(TRUE);END;{********************************************************************************}PROCEDURE MakeBack(NewBack: Pattern);BEGIN  DiurnalP:=NewBack;  FillRect(WordRect,DiurnalP);  FillRect(RoomRect,DiurnalP);  FillRect(PlayRect,DiurnalP);  FillRect(ComdRect,DiurnalP);  FillRect(StatRect,DiurnalP);  FillRect(FeelRect,DiurnalP);END;  {********************************************************************************}PROCEDURE ExecMove;VAR  i:	  	   Integer;  ExecFlag:    Boolean;  JunkFlag:    Boolean;BEGIN  CalcTime(Player,Sentence[Player,VerbA]);  ExecFlag:=FALSE;  REPEAT    Time:=Time+1;	IF Time=Sunset THEN Narrate(9,Player);	IF Time=Night THEN MakeBack(gray);    IF ExecTime[Player]<=Time THEN ExecFlag:=ExecSntc(Player);    FOR i:=1 TO NumChars DO 	  IF (i<>Player) AND (ExecTime[i]<=Time) THEN JunkFlag:=ExecSntc(i);  UNTIL ExecFlag;END;{********************************************************************************}PROCEDURE TakeInput;VAR  i,j,x,y,z,TempWord:   Integer;  TestRect:    	Rect;  HitFlag:     	Boolean;  ch:	       	Char;BEGIN  REPEAT    SystemTask;    IF (GetNextEvent(everyEvent,myEvent)) OR (IconCount=1) THEN      BEGIN        IF (myEvent.what=KeyDown) THEN          BEGIN            x:=BitAnd(myEvent.message,CharCodeMask);            ch:=CHR(x);            IF BitAnd(myEvent.modifiers,CmdKey)<>0 THEN DoCommand(MenuKey(ch));          END;        IF (myEvent.what=mouseDown) OR (IconCount=1) THEN          BEGIN            MousePt:=myEvent.where;            IF FindWindow(MousePt,WhichWindow)=inMenuBar THEN              DoCommand(MenuSelect(MousePt))            ELSE              BEGIN                IF (SntcIndx>1) & PtInRect(MousePt,BkSpRect)				   & (myEvent.what=mouseDown) THEN BackSpWord;                IF SntcIndx=ObjectB2 THEN                  BEGIN {check for endsentence stuff}                    IF PtInRect(MousePt,DoItRect) THEN                      BEGIN                        InvertRect(DoItRect);                        REPEAT UNTIL NOT StillDown;                        InvertRect(DoItRect);                        GetMouse(MousePt);                        IF PtInRect(MousePt,DoItRect) THEN                          BEGIN ExecMove; EndSntc; END;                        MousePt:=MyEvent.where;                      END;                    IF PtInRect(MousePt,CnclRect) THEN                      BEGIN                        InvertRect(CnclRect);                        REPEAT UNTIL NOT StillDown;                        InvertRect(CnclRect);                        GetMouse(MousePt);                        IF PtInRect(MousePt,CnclRect) THEN EndSntc;                        MousePt:=MyEvent.where;                      END;                  END                ELSE {it's not the end of the sentence}                  BEGIN                    i:=1;                    HitFlag:=FALSE;                    WHILE (i<=IconCount) AND (NOT HitFlag) DO                      BEGIN                        y:=39*((i-1) mod 8)+26;                        x:=40*((i-1) div 8)+4;                        SetRect(TestRect,x,y,x+32,y+32);                        IF (PtInRect(MousePt,TestRect)) OR (IconCount=1) THEN                          BEGIN                            HitFlag:=TRUE;                            TempWord:=Abs(IconID[i]);                            CopyBits(WordText[TempWord],ScreenBits,StdRect1,TestRect,srcCopy,NIL);                            InvertRect(TestRect);                            REPEAT UNTIL NOT StillDown;                            CopyBits(WordIcon[TempWord],ScreenBits,StdRect1,TestRect,srcCopy,NIL);                            GetMouse(MousePt);                            IF (PtInRect(MousePt,TestRect)) OR (IconCount=1) THEN                              BEGIN                                CurWord:=TempWord;                                Sentence[Player,SntcIndx+1]:=CurWord;                                REPEAT                                  PlunkDown;                                  IF SntcIndx<ObjectB2 THEN                                      CanclAble[SntcIndx+1]:=IconCount>1;                                UNTIL ((IconCount<>0) OR (SntcIndx=ObjectB2));                                CleanOutRect(PlayRect);                                PlotSntc(Player,ScrnX2+6,ScrnY1+16,(SntcIndx<>ObjectB2));                                DrawBkSp;                                IF SntcIndx=1 THEN GrayRect(BkSpRect);                                IF SntcIndx=ObjectB2 THEN                                  BEGIN {sentence is complete}								    FillRect(WordRect,DiurnalP);                                    DrawDoCncl;                                    IconCount:=0;                                  END;                              END; {of inner PtInRect test}                          END;  {of PtInRect-test}                        i:=i+1;                      END; {of WHILE statement}                  END; {of ELSE-clause}                MyTranslate;              END; {of ELSE-clause}          END; {of mousedown test}      END; {of GetNextEvent-IF}   UNTIL QuitFlag;END;  { TakeInput }{*******************************************************************************}PROCEDURE GoGetEm;VAR  Message,Count:	Integer;  MyAppFile:		AppFile;BEGIN  Player:=1;  NumChars:=ConstChars;  GameLeng:=1;  Level:=1;  SoundOn:=TRUE;  StoryDelay:=BegDelay;  CountAppFiles(Message,Count);  IF Count=0 THEN     BEGIN	  MakeOptions;	  InitGame;	  NewWordSet(TRUE);	  CleanOutRect(RoomRect);	  StatDisp;	END  ELSE	BEGIN	  InitGame;	  GetAppFiles(1,MyAppFile);	  OpenGame(MyAppFile.fName,MyAppFile.vRefNum);	  DrawBkSp;	  IF SntcIndx=1 THEN GrayRect(BkSpRect);	  IF SntcIndx=ObjectB2 THEN		BEGIN 		  FillRect(WordRect,DiurnalP);		  DrawDoCncl;		END;	END;END;{*******************************************************************************}BEGIN  { main program }  MoreMasters;  MoreMasters;  InitGraf(@thePort);  InitFonts;  TEInit;  InitWindows;  InitMenus;  InitDialogs(NIL);  OpenPort(@MyPort);  Titles;  GoGetEm;  UnloadSeg(@InitGame);  InitCursor;  TakeInput;  ExitToShell;END.