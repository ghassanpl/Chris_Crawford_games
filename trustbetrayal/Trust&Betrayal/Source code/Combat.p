UNIT Combat;INTERFACEUSES{$L-}{$U-}     {$LOAD MQOTP.dumpfile}       Memtypes, QuickDraw, OSIntf, ToolIntf, PackIntf,	 {$LOAD Globals.dumpfile}     {$U Globals.p}  Globals;	 {$LOAD}{$U+}{$SETC DebugFlg:=FALSE}PROCEDURE Midnight;IMPLEMENTATION{$S Combat}{********************************************************************************}FUNCTION PickAura(who1,who2: Integer; VAR Figger: Integer): Integer;{this is the all-important AI to pick an aura to cast in combat}VAR   A1,A2,A3,B1,B2,B3,Fig1,Fig2,Fig3,x,High,Low,MyPick:    Integer;BEGIN  A1:=AuraCnt[1,who1,0];  A2:=AuraCnt[2,who1,0];  A3:=AuraCnt[3,who1,0];  B1:=AuraCnt[1,who2,who1];  B2:=AuraCnt[2,who2,who1];  B3:=AuraCnt[3,who2,who1];  High:=B1;  IF B2>High THEN High:=B2;  IF B3>High THEN High:=B3;  IF High=-1 THEN High:=1;  IF B1=-1 THEN B1:=High;  IF B2=-1 THEN B2:=High;  IF B3=-1 THEN B3:=High;  CASE Level OF    1,2:	   BEGIN	     x:=0;		 Low:=A1; 		 IF A3>0 THEN x:=3;		 IF (A2<Low) & (A1>0) THEN BEGIN Low:=A2; x:=1; END;		 IF (A2=Low) & (A3<A1) THEN BEGIN Low:=A2; x:=1; END;		 IF (A3<Low) & (A2>0) THEN BEGIN Low:=A3; x:=2; END;		 IF (A3=Low) & (A1<A2) THEN BEGIN Low:=A3; x:=2; END;		 IF x=0 THEN		   BEGIN		     IF A2>0 THEN x:=2;			 IF A1>0 THEN x:=1;		   END;		 PickAura:=x;		 MyPick:=x;	     x:=3;		 Low:=B1; 		 IF (B2<Low) & (B1>0) THEN BEGIN Low:=B2; x:=1; END;		 IF (B2=Low) & (B3<B1) THEN BEGIN Low:=B2; x:=1; END;		 IF (B3<Low) & (B2>0) THEN BEGIN Low:=B3; x:=2; END;		 IF (B3=Low) & (B1<B2) THEN BEGIN Low:=B3; x:=2; END;		 IF x=0 THEN		   BEGIN		     IF B2>0 THEN x:=2;			 IF B1>0 THEN x:=1;		   END;		 CASE MyPick-x OF		   -2: Figger:=-64;		   -1: Figger:=16;		    0: Figger:=0;		    1: Figger:=-64;		    2: Figger:=16;		  END;	   END;	3: BEGIN		 IF A1>0 THEN		   BEGIN		     IF A3>0 THEN		 	   Fig1:=((8*B2*A1*A3) div (A1*A3))-((8*B3*A2*A3) div (A1*A1))			   ELSE Fig1:=-999;		   END		 ELSE Fig1:=-2000;		 IF A2>0 THEN		   BEGIN		     IF A1>0 THEN		 	   Fig2:=((8*B3*A2*A1) div (A2*A1))-((8*B1*A3*A1) div (A2*A2))			   ELSE Fig2:=-999;		   END		 ELSE Fig2:=-2000;		 IF A3>0 THEN		   BEGIN		     IF A2>0 THEN		 	   Fig3:=((8*B1*A3*A2) div (A3*A2))-((8*B2*A1*A2) div (A3*A3))			   ELSE Fig3:=-999;		   END		 ELSE Fig3:=-2000;		 		 REPEAT x:=Abs(Random div 8192) UNTIL (x>0) AND (x<4);		 IF x=1 THEN Figger:=Fig1;		 IF x=2 THEN Figger:=Fig2;		 IF x=3 THEN Figger:=Fig3;		 		 IF Fig1>Figger THEN BEGIN Figger:=Fig1; x:=1; END;		 IF Fig2>Figger THEN BEGIN Figger:=Fig2; x:=2; END;		 IF Fig3>Figger THEN BEGIN Figger:=Fig3; x:=3; END;		 PickAura:=x;	   END;	END; {of CASE statement}END;{********************************************************************************}PROCEDURE MakeAura(WhichAura,WhereX,WhereY: Integer);VAR  TestRect:		Rect;BEGIN  CASE WhichAura OF    1: BEGIN {tanaga}         MoveTo(WhereX-20,WhereY);         Line(9,0); Line(21,-21); Line(0,38); Line(8,6); Line(-15,0); Line(0,-25);         Line(-9,9); Line(0,7); Line(-14,-14);       END;    2: BEGIN {katsin}         MoveTo(WhereX-19,WhereY+2);         Line(0,-5); Line(15,0); Line(-9,-9); Line(0,-4); Line(4,0); Line(9,9);         Line(0,-15); Line(5,0); Line(0,15); Line(9,-9); Line(4,0); Line(0,4);         Line(-9,9); Line(15,0); Line(0,5); Line(-15,0); Line(9,9); Line(0,4);         Line(-4,0); Line(-9,-9); Line(0,15); Line(-5,0); Line(0,-15);         Line(-9,9); Line(-4,0); Line(0,-4); Line(9,-9); Line(-15,0);       END;    3: BEGIN {shial}         SetRect(TestRect,WhereX-24,WhereY-24,WhereX+24,WhereY+24);         FrameOval(TestRect);         SetRect(TestRect,WhereX-20,WhereY-20,WhereX+20,WhereY+20);         FrameOval(TestRect);         SetRect(TestRect,WhereX-6,WhereY-6,WhereX+6,WhereY+6);         FrameOval(TestRect);       END;  END;END;{********************************************************************************}PROCEDURE CombatGraphic(Who1,Who2,FirstAura,SecondAura: Integer);CONST  FirstX = 224;  FirstY = ScrnY1+136;  SecondX = 284;VAR  i,x,y,z,VictAura,SPassCtr:	  Integer;  FirstRgn,SecondRgn:	 RgnHandle;  TestRect:		 Rect;  FirstWins,SecondWins:	 Boolean;BEGIN  FillRect(thePort^.portRect,black);  FirstWins:=TRUE;  SecondWins:=TRUE;  IF FirstAura<>SecondAura THEN    BEGIN {extract loss}      CASE FirstAura OF        1: FirstWins:=(SecondAura=2);        2: FirstWins:=(SecondAura=3);        3: FirstWins:=(SecondAura=1);      END;      SecondWins:=NOT FirstWins;    END;  IF FirstWins THEN VictAura:=FirstAura ELSE VictAura:=SecondAura;  PlotWord(Who1,FirstX-139,FirstY-11);  PlotWord(Who2,SecondX+112,FirstY-11);  FirstRgn:=NewRgn;  SecondRgn:=NewRgn;  OpenRgn;  HidePen;  MakeAura(FirstAura,FirstX,FirstY);  CloseRgn(FirstRgn);  ShowPen;  FillRgn(FirstRgn,black);  OpenRgn;  HidePen;  MakeAura(SecondAura,SecondX,FirstY);  CloseRgn(SecondRgn);  ShowPen;  FillRgn(SecondRgn,black);  IF SoundOn THEN    BEGIN     IF FirstWins AND SecondWins THEN SPassCtr:=3 ELSE SPassCtr:=5;	 HLock(CombatHndl);	 CombatPtr:=CombatHndl^;	 CbFFPtr:=FFSynthPtr(CombatPtr);	 CbFFPtr^.mode:=FFMode;     CbFFPtr^.count:=FixRatio(1,SPassCtr);     StartSound(CombatPtr,29600,NIL);   END;  IF FirstWins AND SecondWins THEN x:=20    ELSE CASE VictAura OF           1: x:=84;           2: x:=82;           3: x:=78;         END;  IF StoryDelay=ExpDelay THEN x:=1; {Experts skip this crap}  FOR i:=1 TO x DO    BEGIN      InvertRgn(FirstRgn);      IF FirstWins OR (i<20) THEN        BEGIN          InsetRgn(FirstRgn,-1,-1);          FrameRgn(FirstRgn);        END;      InvertRgn(SecondRgn);      IF SecondWins OR (i<20) THEN        BEGIN          InsetRgn(SecondRgn,-1,-1);          FrameRgn(SecondRgn);        END;      IF SoundOn AND SoundDone THEN        BEGIN          SPassCtr:=SPassCtr-1;          IF SPassCtr<1 THEN SPassCtr:=1;          CbFFPtr^.count:=FixRatio(1,SPassCtr);          StartSound(CombatPtr,29600,NIL);        END;    END;  IF SoundOn THEN BEGIN StopSound; HUnlock(CombatHndl); END;  DisposeRgn(FirstRgn);  DisposeRgn(SecondRgn);  FirstWins:=SpinWheel(120);  FillRect(thePort^.portRect,black);END;{********************************************************************************}PROCEDURE Victory(Winner,Loser,Lost: Integer);VAR  x:	Integer;BEGIN  x:=AuraCnt[Lost,Loser,0]-1;  IF x<0 THEN x:=0;  AuraCnt[Lost,Loser,0]:=x;  AuraCnt[Lost,Loser,Loser]:=x;  IF AuraCnt[Lost,Loser,Winner]>=0 THEN AuraCnt[Lost,Loser,Winner]:=x;  IF x>0 THEN    BEGIN	  x:=AuraCnt[Lost,Winner,0]+1;	  IF x>8 THEN x:=8;	  AuraCnt[Lost,Winner,0]:=x;	  AuraCnt[Lost,Winner,Winner]:=x;	  IF AuraCnt[Lost,Winner,Loser]>=0 THEN AuraCnt[Lost,Winner,Loser]:=x;	END;  IF (Loser=Player) & (StoryParm[40]>0) THEN StoryParm[40]:=8;  IF (Winner=Player) & (StoryParm[40]>0) THEN StoryParm[40]:=1024;  IF (Loser=Player) & (StoryParm[21]>0) THEN StoryParm[21]:=1024;  IF (Winner=Player) & (StoryParm[21]>0) THEN StoryParm[21]:=8;  IF (Loser=Player) & (StoryParm[22]>0) THEN StoryParm[22]:=8;  IF (Winner=Player) & (StoryParm[22]>0) THEN StoryParm[22]:=1024;END;{********************************************************************************}PROCEDURE MindCombat(who1,who2,Cast1,Cast2:  Integer);VAR  x:	Integer;BEGIN  IF Cast1<>Cast2 THEN    BEGIN {extract loss}      CASE Cast1 OF        1: IF Cast2=2 THEN Victory(who1,who2,2) ELSE Victory(who2,who1,1);        2: IF Cast2=3 THEN Victory(who1,who2,3) ELSE Victory(who2,who1,2);        3: IF Cast2=1 THEN Victory(who1,who2,1) ELSE Victory(who2,who1,3);      END;    END;  CombatGraphic(Who1,Who2,Cast1,Cast2);  IF NAttack[who1,who2] THEN    BEGIN	  NAttackCount[who1,who2]:=NAttackCount[who1,who2]+1;	  x:=Trust[who2,who1]-16;	  IF x<-127 THEN x:=-127;	  Trust[who2,who1]:=x;	END;END;{********************************************************************************}PROCEDURE GameWin(WhoWon: Integer);VAR  TempRect:	  Rect;  TempString: Str255;  OKFlag:     Boolean;  TempInt:    Integer;  i,j,x,dx,dy:  Integer;  AuraRgn:	  ARRAY[1..3] OF RgnHandle;  RgnX,RgnY:  ARRAY[1..3] OF Integer;  ShimMap:		BitMap;  ShimBits:		IditArr;  LoclFace:		BitMap;  FaceBits:		ARRAY[1..1600] OF Integer;  OldMap:		BitMap;  OldBits:		ARRAY[1..1600] OF Integer;BEGIN  ShimMap.rowbytes:=20;  ShimMap.BaseAddr:=@ShimBits;  SetRect(ShimMap.bounds,0,0,160,160);  LoclFace.rowbytes:=20;  LoclFace.BaseAddr:=@FaceBits;  SetRect(LoclFace.bounds,0,0,160,160);  OldMap.rowbytes:=20;  OldMap.BaseAddr:=@OldBits;  SetRect(OldMap.bounds,0,0,160,160);  FillRect(MyPort.portrect,white);  RgnX[1]:=256; RgnY[1]:=-229;  RgnX[2]:=-88; RgnY[2]:=371;  RgnX[3]:=608; RgnY[3]:=371;  FOR j:=1 TO 3 DO    BEGIN	  AuraRgn[j]:=NewRgn;	  OpenRgn;	  MakeAura(j,RgnX[j],RgnY[j]);	  CloseRgn(AuraRgn[j]);	END;  FOR i:=1 TO 500 DO    BEGIN	  FOR j:=1 TO 3 DO	    BEGIN		  dx:=(RgnX[j]-256) div 8;		  dy:=(RgnY[j]-171) div 8;		  IF (dx=0) & (dy=0) THEN 		    BEGIN			  dx:=RgnX[j]-256;			  dy:=RgnY[j]-171;			END;		  RgnX[j]:=RgnX[j]+dy-(dx div 8);		  RgnY[j]:=RgnY[j]-dx-(dy div 8);		  OffsetRgn(AuraRgn[j],dy-(dx div 8),-dx-(dy div 8));		  InvertRgn(AuraRgn[j]);		END;	END;  HideCursor;  SetRect(TempRect,176,91,336,251);  CopyBits(Face[WhoWon],LoclFace,StdRect3,StdRect3,srcCopy,NIL);  CopyBits(ScreenBits,OldMap,TempRect,StdRect3,srcCopy,NIL);  RgnX[1]:=256; RgnY[1]:=147;  RgnX[2]:=235; RgnY[2]:=183;  RgnX[3]:=277; RgnY[3]:=183;  OffsetRgn(AuraRgn[1],0,-24);  OffsetRgn(AuraRgn[2],-21,12);  OffsetRgn(AuraRgn[3],21,12);  FOR i:=1 TO 500 DO    BEGIN	  FOR j:=1 TO 3 DO	    BEGIN		  dx:=(RgnX[j]-256) div 8;		  dy:=(RgnY[j]-171) div 8;		  RgnX[j]:=RgnX[j]-dy;		  RgnY[j]:=RgnY[j]+dx;		  OffsetRgn(AuraRgn[j],-dy,dx);		  InvertRgn(AuraRgn[j]);		END;	  IF i<250 THEN	    BEGIN		  CopyBits(ScreenBits,OldMap,TempRect,StdRect3,NOTSrcXOr,NIL);		  CopyBits(ScreenBits,ShimMap,TempRect,StdRect3,SrcCopy,NIL);		  CopyBits(LoclFace,ShimMap,StdRect3,StdRect3,SrcXOr,NIL);		  CopyBits(OldMap,ShimMap,StdRect3,StdRect3,NOTSrcBic,NIL);		  CopyBits(LoclFace,ShimMap,StdRect3,StdRect3,SrcXOr,NIL);		  CopyBits(ShimMap,ScreenBits,StdRect3,TempRect,SrcCopy,NIL);		  CopyBits(ScreenBits,OldMap,TempRect,StdRect3,SrcCopy,NIL);		END;	END;  CopyBits(LoclFace,ScreenBits,StdRect3,TempRect,SrcCopy,NIL);  FOR j:=1 TO 3 DO DisposeRgn(AuraRgn[j]);  TextFont(2); TextSize(36);  TempString:=CharName[WhoWon];  TempInt:=StringWidth(TempString) div 2;  SetRect(TempRect,256-TempInt-4,24,256+TempInt+4,68);  FillRect(TempRect,white);  FrameRect(TempRect);  MoveTo(256-TempInt,60); DrawString(CharName[WhoWon]);  TempString:='The New Shepherd';  TempInt:=StringWidth(TempString) div 2;  SetRect(TempRect,256-TempInt-4,264,256+TempInt+4,308);  FillRect(TempRect,white);  FrameRect(TempRect);  MoveTo(256-TempInt,300); DrawString(TempString);  TextFont(0); TextSize(12);  SetRect(OKRect,226,315,286,340);  FillRect(OKRect,white);  FrameRect(OKRect);  MoveTo(OKRect.left+22,OKRect.top+18); DrawString('OK');  ShowCursor;  OKFlag:=FALSE;  REPEAT    SystemTask;    IF GetNextEvent(everyEvent,myEvent) THEN      BEGIN        IF myEvent.what=KeyDown THEN          BEGIN            IF BitAnd(myEvent.message,CharCodeMask)=13 THEN              BEGIN                InvertRect(OKRect);                MyWait(10);                InvertRect(OKRect);                OKFlag:=TRUE;              END;          END;        IF myEvent.what=mouseDown THEN          BEGIN            MousePt:=myEvent.where;            IF PtInRect(MousePt,OKRect) THEN              BEGIN                InvertRect(OKRect);                REPEAT UNTIL NOT StillDown;                InvertRect(OKRect);                OKFlag:=TRUE;              END;          END;      END;  UNTIL OKFlag;  ExitToShell;END;{********************************************************************************}PROCEDURE Midnight;CONST  LeftX = 134;VAR  i,j,k,BestVal,BestIndx,x,y,z,Cast1,Cast2,who1,who2:     Integer;  PowerArr,WhoArr:	      ARRAY[1..ConstChars] OF Integer;  DamRect:		      ARRAY[1..3] OF Rect;  DumbFlag,WonFlag:	    Boolean;  TestCast,BestFig,FigMerit:		Integer;  SumAuras:		Integer;BEGIN  DiurnalP:=black;  FillRect(thePort^.portRect,black);  FOR i:=1 TO NumChars DO    BEGIN	  	  PowerArr[i]:=AuraCnt[1,i,0]*AuraCnt[2,i,0]*AuraCnt[3,i,0] div	              (AuraCnt[1,i,0]+AuraCnt[2,i,0]+AuraCnt[3,i,0]); 	  WhoArr[i]:=i; 	END;  PowerArr[1]:=50; {stupid kluge to make human go first}  {here it comes: StupidSort!!! but for only eight entries, who cares?}  FOR i:=1 TO NumChars DO    BEGIN      BestVal:=-1; BestIndx:=0;      FOR j:=i TO NumChars DO        IF PowerArr[j]>BestVal THEN BEGIN BestVal:=PowerArr[j]; BestIndx:=j; END;      x:=PowerArr[i];      PowerArr[i]:=BestVal;      PowerArr[BestIndx]:=x;      x:=WhoArr[i];      WhoArr[i]:=WhoArr[BestIndx];      WhoArr[BestIndx]:=x;    END;  FOR i:=1 TO NumChars DO    BEGIN {do combat in order}  	  TransIndx:=0;      who1:=WhoArr[i];      IF who1=Player THEN	    BEGIN		  who2:=Sentence[Player,ObjectA1];		  Cast1:=Sentence[Player,VerbA]-52;		  Cast2:=PickAura(who2,Player,FigMerit);		  IF Cast2=0 THEN		    BEGIN			  Cast2:=Cast1+1;			  IF Cast2=4 THEN Cast2:=1;			END;	   	  MindCombat(Player,who2,Cast1,Cast2);		END      ELSE        BEGIN		  Cast1:=0;		  BestFig:=-1000;		  FOR j:=1 TO NumChars DO IF (j<>who1) THEN		    BEGIN			  TestCast:=PickAura(who1,j,FigMerit);			  FigMerit:=FigMerit-(Love[who1,j] div 8);			  IF NAttack[who1,j] THEN FigMerit:=FigMerit-Integrity[Me] div 2;			  IF (FigMerit>BestFig) | ((FigMerit=BestFig) & (Random>0)) THEN 			    BEGIN				  BestFig:=FigMerit;				  who2:=j;				  Cast1:=TestCast;				END;		    END;		  IF Cast1>0 THEN		    BEGIN			  IF who2=Player THEN				BEGIN				  Narrate(10,who1);				  x:=LeftX; y:=ScrnY1+58;				  {who he is}				  PlotWord(Who1,x,y);				  {his aura counts}				  FOR j:=1 TO 3 DO					BEGIN					  x:=x+39;					  PlotWord(AuraCnt[j,Who1,Player]+104,x,y);					  x:=x+32;					  PlotWord(65+j,x,y);					END;				  x:=LeftX; y:=y+39;				  {who I am}				  PlotWord(Player,x,y);				  {my aura counts}				  FOR j:=1 TO 3 DO					BEGIN					  x:=x+39;					  PlotWord(AuraCnt[j,Player,Player]+104,x,y);					  x:=x+32;					  PlotWord(65+j,x,y);					END;					  {say, "He attacks me"}				  y:=y+39;				  FOR j:=1 TO SntcLeng DO Sentence[0,j]:=0;				  Sentence[0,SubjectA]:=who1;				  Sentence[0,VerbA]:=56;				  Sentence[0,ObjectA1]:=who2;				  PlotSntc(0,LeftX+65,y,FALSE);					  y:=y+39;				  x:=LeftX+7;				  PlotWord(Player,x,y);				  RightCnct(x,y);				  x:=LeftX+207;				  PlotWord(who1,x,y);				  RightCnct(x-40,y);				  x:=LeftX+67;				  FOR j:=1 TO 3 DO					BEGIN					   IF AuraCnt[j,Player,Player]>0 THEN PlotWord(52+j,x,y);					   SetRect(DamRect[j],x,y,x+32,y+32);					   x:=x+40;					END;				  DumbFlag:=FALSE;				  REPEAT					FOR j:=1 TO 3 DO					  BEGIN						IF AuraCnt[j,Player,Player]>0 THEN						  BEGIN							InvertRect(DamRect[j]);							MyWait(10);							InvertRect(DamRect[j]);						  END;						SystemTask;						IF GetNextEvent(everyEvent,myEvent) & (myEvent.what=mouseDown) THEN						  BEGIN							MousePt:=myEvent.where;							FOR k:=1 TO 3 DO IF PtInRect(MousePt,DamRect[k])											AND (AuraCnt[k,Player,Player]>0) THEN							  BEGIN								InvertRect(DamRect[k]);								REPEAT UNTIL NOT StillDown;								InvertRect(DamRect[k]);								DumbFlag:=TRUE;								Cast2:=k;							  END;							MyTranslate;						  END;					  END;				  UNTIL DumbFlag;				  CombatGraphic(who1,who2,Cast1,Cast2);				END			  ELSE Cast2:=PickAura(who2,who1,FigMerit);			  IF Cast1<>Cast2 THEN				BEGIN {extract loss}				  CASE Cast1 OF					1: IF Cast2=2 THEN Victory(who1,who2,2) ELSE Victory(who2,who1,1);					2: IF Cast2=3 THEN Victory(who1,who2,3) ELSE Victory(who2,who1,2);					3: IF Cast2=1 THEN Victory(who1,who2,1) ELSE Victory(who2,who1,3);				  END;				END;			END; {of Cast1>0 test}        END;    END; {of combat in order}  WonFlag:=TRUE;  FOR j:=1 TO 3 DO IF AuraCnt[j,Player,0]<>8 THEN WonFlag:=FALSE;  {$IFC DebugFlg}    IF Button THEN WonFlag:=TRUE;  {$ENDC}  IF WonFlag THEN GameWin(Player)  ELSE    BEGIN      FOR i:=2 TO NumChars DO        BEGIN {check to see if anybody has won the game}	      WonFlag:=TRUE;	      FOR j:=1 TO 3 DO IF AuraCnt[j,i,0]<>8 THEN WonFlag:=FALSE;	      IF WonFlag THEN GameWin(i);		END;  	  IF NOT WonFlag & (AuraCnt[1,Player,0]=0) & (AuraCnt[2,Player,0]=0)	    & (AuraCnt[3,Player,0]=0) THEN		BEGIN		  WonFlag:=TRUE;		  BestVal:=128;		  BestIndx:=0;		  FOR i:=2 TO NumChars DO		    BEGIN			  IF Love[i,Player]<BestVal THEN			    BEGIN 				  BestVal:=Love[i,Player];				  BestIndx:=i;				END;			END;		  GameWin(BestIndx);		END;    END;  StoryParm[41]:=1024;  FOR i:=1 TO NumChars DO    BEGIN {erase knowledge and kickstart}      Sentence[i,SubjectA]:=i;      Sentence[i,VerbA]:=51;      FOR j:=ObjectA1 TO SntcLeng DO Sentence[i,j]:=0;      ExecTime[i]:=Dawn+i;	  FOR k:=1 TO 3 DO AuraCnt[k,i,i]:=AuraCnt[k,i,0];	  SumAuras:=0;	  FOR k:=1 TO 3 DO SumAuras:=SumAuras+AuraCnt[k,i,i];	  IF (SumAuras=23) & (StoryParm[41]>0) & (i<>Player) THEN StoryParm[41]:=40+i;    END;  FOR i:=1 TO NumChars DO    BEGIN	  FOR j:=1 TO NumChars DO IF i<>j THEN	    BEGIN	      FOR k:=1 TO 3 DO AuraCnt[k,j,i]:=-1;		  REPEAT k:=Abs(Random div 8192) UNTIL (k>0) AND (k<=3);		  AuraCnt[k,j,i]:=AuraCnt[k,j,0];		END;	END;  FOR i:=1 TO NumChars DO     BEGIN	  FOR j:=1 TO NumChars DO	    BEGIN		  NAttack[i,j]:=FALSE;		  Visits[i,j]:=0;		END;    END;  Time:=Dawn;   IF Day<64 THEN Day:=Day+1; {must preserve the NBetray array}  IF ((PlayerDeals div (Day-1))<4) & (StoryParm[38]=1024) THEN StoryParm[38]:=8;  FillRect(MyPort.portrect,white);  TransIndx:=0;  DrawMenuBar;  MoveTo(ScrnX1-3,ScrnY1); LineTo(ScrnX1-3,342);  MoveTo(ScrnX1-1,ScrnY1); LineTo(ScrnX1-1,342);  MoveTo(ScrnX1,ScrnY2-3); LineTo(512,ScrnY2-3);  MoveTo(ScrnX1,ScrnY2-1); LineTo(512,ScrnY2-1);  MoveTo(ScrnX2-3,ScrnY1); LineTo(ScrnX2-3,342);  MoveTo(ScrnX2-1,ScrnY1); LineTo(ScrnX2-1,342);  PenPat(Gray);  MoveTo(ScrnX1-2,ScrnY1); LineTo(ScrnX1-2,342);  MoveTo(ScrnX1,ScrnY2-2); LineTo(512,ScrnY2-2);  MoveTo(ScrnX2-2,ScrnY1); LineTo(ScrnX2-2,342);  PenNormal;  DiurnalP:=white;  StatDisp;END;{********************************************************************************}END.